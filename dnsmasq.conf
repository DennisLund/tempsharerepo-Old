input {
    beats {
        port => 5001
    }
}


filter {
#    mutate {
#    remove_field=> [ "source" ]
#    }


    if [fields][type] == "pihole-log"{
        grok {
                patterns_dir => ["/etc/logstash/patterns"]
                match=> { "message" => ["^%{logdate:LOGDATE} dnsmasq\[[\d]+\]\: query\[[\w]+\] %{domain:[destination][domain]} from %{clientip:[source][ip]}", "^%{logdate:LOGDATE} dnsmasq\[[\d]+\]\: reply %{domain:[destination][domain]} is %{ip:[destination][ip]}", "^%{logdate:LOGDATE} dnsmasq\[[\d]+\]\: %{blocklist:BLOCKLIST} %{domain:[destination][domain]} is %{ip:[destination][ip]}"]
            }
        }
    }

    if [destination][domain] or [destination][ip] {
        memcached {
            hosts => ["127.0.0.1:11211"]
            get => {
                "ip-dst-%{[destination][ip]}" => "[misp][feed][ip]"
                "domain-%{[destination][domain]}" => "[misp][feed][domain]"
                "domain-%{[process][args]}" => "[misp][feed][domain]"
            }
        }

        if [misp][feed][domain] {
            ruby {
                init => "
                    require 'net/http'
                    require 'uri'
                    require 'json'
                "
                code => "
                    uri = URI.parse('https://<MISP IP>/attributes/restSearch')
                    request = Net::HTTP::Post.new(uri)
                    request.content_type = 'application/json'
                    request['Accept'] = 'application/json'
                    request['Authorization'] = '<MISP API-KEY>'
                    request.body = JSON.dump ({
                        'returnFormat' => 'json',
                        'includeEventTags' => 'yes',
                        'value' => event.get('[destination][domain]')
                    })

                    req_options = {
                        use_ssl: uri.scheme == 'https',
                        verify_mode: OpenSSL::SSL::VERIFY_NONE,
                    }

                    response = Net::HTTP.start(uri.hostname, uri.port, req_options) do |http|
                    http.request(request)
                    end

                    if response.code == '200'
                        result = JSON.parse(response.body)
                        #event.set('MISP.all', result)
                        mispeventinfoarr = []
                        mispeventtagarr = []
                        mispattributetagarr = []
                        for e in result['response']['Attribute']
                            tempattributetagarr = []
                            tempeventtagarr = []
                            if e.key?('Tag')
                                for t in e['Tag']
                                    eventtagCheck = t['inherited']
                                    if eventtagCheck == 1
                                        tempeventtagarr.push([t['name']])
                                    elsif !eventtagCheck
                                        tempattributetagarr.push([t['name']])
                                    end
                                end
                            end
                            mispeventtagarr.push(tempeventtagarr)
                            mispattributetagarr.push(tempattributetagarr)
                            tempeventarr = [e['Event']['info']]
                            mispeventinfoarr.push(tempeventarr)
                        end
                        for index in (0...mispeventinfoarr.length)
                            event.set('[misp][eventinfo-%s][eventtags]' % [index + 1], mispeventtagarr[index].uniq)
                            event.set('[misp][eventinfo-%s][attributetags]' % [index + 1], mispattributetagarr[index].uniq)
                            event.set('[misp][eventinfo-%s][info]' % [index + 1], mispeventinfoarr[index].uniq)
                        end
                    end
                "
            }
        }

        if [misp][feed][ip] {
            ruby {
                init => "
                    require 'net/http'
                    require 'uri'
                    require 'json'
                "
                code => "
                    uri = URI.parse('https://<MISP IP>/attributes/restSearch')
                    request = Net::HTTP::Post.new(uri)
                    request.content_type = 'application/json'
                    request['Accept'] = 'application/json'
                    request['Authorization'] = '<MISP API-KEY>'
                    request.body = JSON.dump ({
                        'returnFormat' => 'json',
                        'includeEventTags' => 'yes',
                        'value' => event.get('[destination][ip]')
                    })

                    req_options = {
                        use_ssl: uri.scheme == 'https',
                        verify_mode: OpenSSL::SSL::VERIFY_NONE,
                    }

                    response = Net::HTTP.start(uri.hostname, uri.port, req_options) do |http|
                    http.request(request)
                    end

                    if response.code == '200'
                        result = JSON.parse(response.body)
                        #event.set('MISP.all', result)
                        mispeventinfoarr = []
                        mispeventtagarr = []
                        mispattributetagarr = []
                        for e in result['response']['Attribute']
                            tempattributetagarr = []
                            tempeventtagarr = []
                            if e.key?('Tag')
                                for t in e['Tag']
                                    eventtagCheck = t['inherited']
                                    if eventtagCheck == 1
                                        tempeventtagarr.push([t['name']])
                                    elsif !eventtagCheck
                                        tempattributetagarr.push([t['name']])
                                    end
                                end
                            end
                            mispeventtagarr.push(tempeventtagarr)
                            mispattributetagarr.push(tempattributetagarr)
                            tempeventarr = [e['Event']['info']]
                            mispeventinfoarr.push(tempeventarr)
                        end
                        for index in (0...mispeventinfoarr.length)
                            event.set('[misp][eventinfo-%s][eventtags]' % [index + 1], mispeventtagarr[index].uniq)
                            event.set('[misp][eventinfo-%s][attributetags]' % [index + 1], mispattributetagarr[index].uniq)
                            event.set('[misp][eventinfo-%s][info]' % [index + 1], mispeventinfoarr[index].uniq)
                        end
                    end
                "
            }
        }
    }

    if ![misp][feed] {
        mutate {
            add_field=> { "[misp][hit]" => "no" }
        }
    }

    else {
        mutate {
            add_field => { "[misp][hit]" => "yes" }
        }
    }
}


output {

    if [fields][type] == "pihole-log" {
        elasticsearch {
            hosts => ["127.0.0.1:9200"]
            index => "pihole"
            manage_template => false
        }
    }

    else {
        elasticsearch {
            hosts => ["127.0.0.1:9200"]
            index => "filebeat"
            manage_template => false
        }
    }
}
